Heap Sort

Heap Sort is an efficient comparison-based sorting algorithm that uses a data structure called a binary heap[1] to sort an array or a list of elements.

The Heap Sort algorithm works as follows:

1. First, it transforms the input array into a max heap - a specialized tree-based data structure which satisfies the heap property. In a max heap, for any given node i, the value of i is greater than or equal to the values of its children. This is done in the heapSort method, in the first for loop where heapify method is called.

2. Once the max heap is built, the largest item (the root of the heap) is swapped with the last item in the array, effectively putting the largest item in its correct place in the array. The size of the heap is reduced by one (excluding the last element of the array from the heap). The heapify method is then called on the root node, ensuring it remains a max heap after the swap.

3. These steps are repeated until the entire array is sorted.


Pseudocode for the algorithm:

HeapSort(array)
{
    size = length of the array

    // Build a max heap from the input array
    for (i from size/2 down to 0)
    {
        Heapify(array, size, i)
    }

    // One by one, extract elements from the heap and place them at the end of the array
    for (i from size - 1 down to 0)
    {
        swap(array[0], array[i]) // Move the largest element to the end of the array
        Heapify(array, i, 0) // Restore the heap property for the remaining elements
    }
}

Heapify(array, size, index)
{
    largest = index
    leftChild = 2 * index + 1
    rightChild = 2 * index + 2

    // Check if the left child is within the heap and if it's larger than the current largest element
    if (leftChild < size and array[leftChild] > array[largest])
        largest = leftChild

    // Check if the right child is within the heap and if it's larger than the current largest element
    if (rightChild < size and array[rightChild] > array[largest])
        largest = rightChild

    // If the largest element is not the current element, swap them and recursively heapify the affected subtree
    if (largest is not equal to index)
    {
        swap(array[index], array[largest])
        Heapify(array, size, largest) // Recursively call Heapify on the affected subtree
    }
}


Time Complexity

Building the Heap: The initial step of Heap Sort involves building a max heap from the input array. This step takes O(n) time complexity because you need to heapify each element, which takes O(log n) time, and there are 'n' elements in the array. So, the building of the heap contributes O(n * log n) to the overall time complexity.

Heapify Operation: After the heap is constructed, the largest element (the root) is swapped with the last element of the heap and then the heapify operation is performed on the root to maintain the heap property. The heapify operation also takes O(log n) time. Since there are 'n' elements, and each element may require O(log n) time for heapification, this step adds another O(n * log n) to the time complexity.

Total Time Complexity: When you add the time complexities of building the heap and the heapify operations, you get a total time complexity of O(n * log n).

In conclusion, Heap Sort has a time complexity of O(n log n) due to the two main operations it performs - building the heap and performing heapify operations. This complexity is quite efficient, making Heap Sort a good choice for sorting large datasets and is generally faster than other quadratic time complexity sorting algorithms like Bubble Sort or Insertion Sort.


References:

[1] GeeksforGeeks. "Heap Sort â€“ Data Structures and Algorithms Tutorials". GeeksforGeeks. Accessed: Oct 27th, 2023. [Online]. Available: https://www.geeksforgeeks.org/heap-sort/

[2] Programiz. "Sorting Algorithm". Programiz. Accessed: Oct 27th, 2023. [Online]. Available: https://www.programiz.com/dsa/sorting-algorithm

[3] OpenGenus. "Time & Space Complexity of Heap Sort". OpenGenus. Accessed: Oct 27th, 2023. [Online]. Available: https://iq.opengenus.org/time-complexity-of-heap-sort/



