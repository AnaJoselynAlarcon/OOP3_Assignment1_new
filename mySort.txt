Heap Sort

Heap Sort is an efficient comparison-based sorting algorithm that uses a data structure called a binary heap[1] to sort an array or a list of elements.

The Heap Sort algorithm works as follows:

1. First, it transforms the input array into a max heap - a specialized tree-based data structure which satisfies the heap property. In a max heap, for any given node i, the value of i is greater than or equal to the values of its children. This is done in the heapSort method, in the first for loop where heapify method is called.

2. Once the max heap is built, the largest item (the root of the heap) is swapped with the last item in the array, effectively putting the largest item in its correct place in the array. The size of the heap is reduced by one (excluding the last element of the array from the heap). The heapify method is then called on the root node, ensuring it remains a max heap after the swap.

3. These steps are repeated until the entire array is sorted.


Pseudocode for the algorithm:

HeapSort(array)
{
    size = length of the array // 1 assignment

    // Build a max heap from the input array
    for (i from size/2 down to 0) // 1 assignment, n / 2 division (logn) and n (assignment +  operation)
    {
        Heapify(array, size, i)
    }

    // One by one, extract elements from the heap and place them at the end of the array
    for (i from size - 1 down to 0) // 1 assignment, n comparisons and n (assignment + operation)
    {
        swap(array[0], array[i]) // Move the largest element to the end of the array, 2 assignments and 1 operations
        Heapify(array, i, 0) // Restore the heap property for the remaining elements
    }
}

Heapify(array, size, index)
{
    largest = index // 1 assignment
    leftChild = 2 * index + 1 // 2 operations
    rightChild = 2 * index + 2 // 2 operations

    // Check if the left child is within the heap and if it's larger than the current largest element
    if (leftChild < size and array[leftChild] > array[largest]) // n comparisons
        largest = leftChild // 1 assignment

    // Check if the right child is within the heap and if it's larger than the current largest element
    if (rightChild < size and array[rightChild] > array[largest]) // n comparisons
        largest = rightChild // 1 assignment

    // If the largest element is not the current element, swap them and recursively heapify the affected subtree
    if (largest is not equal to index) // n comparisons
    {
        swap(array[index], array[largest]) // 2 assignments and 1 operation
        Heapify(array, size, largest) // Recursively call Heapify on the affected subtree
    }
}


Time Complexity

The analysis outlined above gives us the following equation:

f(n) = n/2 * (1 assignment + 1 division + 1 assignment + n comparisons) + n * (1 assignment + n comparisons + 1 assignment + 2 assignments + 1 operation + n comparisons + 2 assignments + 1 operation)

Simplifying:

f(n) = logn * (3 + n) + n * (8) = 3logn + nlogn + 8n

The time complexity of the heap sorting algorithm is O(nlogn)


References:

[1] GeeksforGeeks. "Heap Sort â€“ Data Structures and Algorithms Tutorials". GeeksforGeeks. Accessed: Oct 27th, 2023. [Online]. Available: https://www.geeksforgeeks.org/heap-sort/

[2] Programiz. "Sorting Algorithm". Programiz. Accessed: Oct 27th, 2023. [Online]. Available: https://www.programiz.com/dsa/sorting-algorithm

[3] OpenGenus. "Time & Space Complexity of Heap Sort". OpenGenus. Accessed: Oct 27th, 2023. [Online]. Available: https://iq.opengenus.org/time-complexity-of-heap-sort/



